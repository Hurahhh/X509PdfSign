@{
    ViewBag.Title = "Home Page";
}

@section styles {
    <style>
        .w-100 {
            max-width: none;
            width: 100%;
        }

        .mt-8px {
            margin-top: 8px;
        }

        .h-200px {
            height: 200px;
        }

        .h-400px {
            height: 400px;
        }

        .border {
            border: 1px solid black;
        }

        .mw-100 {
            max-width: 100%;
        }

        .mh-100 {
            max-height: 100%;
        }

        .d-flex {
            display: flex;
        }

        .justify-content-center {
            justify-content: center;
        }

        .align-items-center {
            align-items: center;
        }
    </style>
}

<!-- Modal -->
<div class="modal fade" id="myModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Pdf digital signer</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addon1">Pdf</span>
                            <input type="file" class="form-control w-100" aria-describedby="sizing-addon1" id="inputPdf">
                        </div>
                        <div class="mt-8px w-100">
                            <iframe src="" class="w-100 h-400px" id="iframePdf"></iframe>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addon2">Image</span>
                            <input type="file" class="form-control w-100" aria-describedby="sizing-addon2" id="inputImage">
                        </div>
                        <div class="mt-8px img-thumbnail w-100 h-200px d-flex justify-content-center align-items-center">
                            <img src="#" alt="" id="imgImage" class="mw-100 mh-100" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnSign">Sign</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="~/Scripts/custom/forge.min.js"></script>
    <script src="~/Scripts/custom/util.js"></script>
    <script src="~/Scripts/custom/CAPluginService.js"></script>

    <script defer>
        jQuery(function ($) {
            var $inputPdf = $("#inputPdf");
            var $iframePdf = $("#iframePdf");
            var $inputImage = $("#inputImage");
            var $imgImage = $("#imgImage");

            $("#myModal").modal({
                backdrop: 'static',
                keyboard: false,
                show: true
            });

            $inputPdf.on("change", function () {
                var file = this.files[0];
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function () {
                    $iframePdf.attr('src', reader.result);
                };
                reader.onerror = function (error) {
                    console.log('Error: ', error);
                };
            });

            $inputImage.on("change", function () {
                var file = this.files[0];
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function () {
                    $imgImage.attr('src', reader.result);
                };
                reader.onerror = function (error) {
                    console.log('Error: ', error);
                };
            });

            $("#btnSign").on("click", () => {
                if (!validate()) {
                    showDangerMessage('Please input pdf and signature image firstly!');
                    return;
                }

                CAPluginService
                    .getToken()
                    .then(token =>
                        CAPluginService
                            .getCert(token)
                            .then(commaSeparatedCertChainBase64 => {
                                var pki = forge.pki;

                                var pem = util.pemFromBase64Cert(commaSeparatedCertChainBase64);
                                var cert = pki.certificateFromPem(pem);
                                _serialNumber = cert.serialNumber;

                                if (commaSeparatedCertChainBase64 && commaSeparatedCertChainBase64 != 'E04') {
                                    var i = $iframePdf.attr('src').indexOf(',') + 1;
                                    var j = $imgImage.attr('src').indexOf(',') + 1;
                                    preSign($iframePdf.attr('src').substring(i), $imgImage.attr('src').substring(j), commaSeparatedCertChainBase64, token);
                                } else {
                                    showDangerMessage('Do you plug USB token and plugin is still running?');
                                }
                            })
                            .catch(e => showDangerMessage('Do you plug USB token and plugin is still running?'))
                    )
                    .catch(e => showDangerMessage('Do you plug USB token and plugin is still running?'));
            });

            function validate() {
                if ($iframePdf.attr('src') && $imgImage.attr('src')) {
                    return true;
                }

                return false;
            }

            function preSign(pdfBase64, graphicBase64, commaSeparatedCertChainBase64, token) {
                var data = {
                    PdfBase64: pdfBase64,
                    GraphicBase64: graphicBase64,
                    CommaSeparatedCertChainBase64: commaSeparatedCertChainBase64,
                };

                showLoader();

                $.ajax({
                    url: '/Home/PreSign',
                    method: 'POST',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function (response) {
                        if (response.Status == 1) {
                            // savePdf(response.Data.PdfBase64, "presigned.pdf");

                            CAPluginService
                                .signHash(token, response.Data.Digest, _serialNumber)
                                .then(signatureBase64 => {
                                    if (signatureBase64 && signatureBase64 != 'E04') {
                                        insertSignature(response.Data.UniqueId, response.Data.PdfBase64, signatureBase64, commaSeparatedCertChainBase64)
                                    } else {
                                        showDangerMessage('Do you plug USB token and plugin is still running?');
                                    }
                                })
                                .catch(e => showDangerMessage('Do you plug USB token and plugin is still running?'));
                        } else {
                            showDangerMessage(response.Data.Message);
                        }
                    },
                    complete: function () {
                        hideLoader();
                    }
                })
            }

            function insertSignature(uniqueId, pdfBase64, signatureBases64, commaSeparatedCertChainBase64) {
                var data = {
                    UniqueId: uniqueId,
                    PdfBase64: pdfBase64,
                    SignatureBases64: signatureBases64,
                    CommaSeparatedCertChainBase64: commaSeparatedCertChainBase64
                };

                showLoader();

                $.ajax({
                    url: '/Home/InsertSignature',
                    method: 'POST',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function (response) {
                        if (response.Status == 1) {
                            showSuccessMessage("Sign success");
                            savePdf(response.Data.PdfBase64, "signed.pdf");
                        } else {
                            showDangerMessage(response.Data.Message);
                        }
                    },
                    complete: function () {
                        hideLoader();
                    }
                })
            }

            function showDangerMessage(msg) {
                bootoast.toast({
                    message: msg,
                    type: 'danger',
                    position: 'top',
                    icon: null,
                    timeout: 5,
                    animationDuration: 300,
                    dismissible: true
                });
            }

            function showSuccessMessage(msg) {
                bootoast.toast({
                    message: msg,
                    type: 'success',
                    position: 'top',
                    icon: null,
                    timeout: 5,
                    animationDuration: 300,
                    dismissible: true
                });
            }

            function showLoader() {
                var $loader = $('.loader');
                if ($loader.length == 0) {
                    $loader = $(`
                        <div class="loader">
                            <div class="spinner-border" role="status" style="color: white">
                              <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    `);

                    $('body').prepend($loader);
                }
                else {
                    $loader.show();
                }
            }

            function hideLoader() {
                var $loader = $('.loader');
                if ($loader.length > 0) {
                    $loader.hide();
                }
            }

            function savePdf(base64String, fileName) {
                const href = `data:application/pdf;base64,${base64String}`;
                const a = document.createElement('a');
                document.body.appendChild(a);

                a.href = href;
                a.target = '_self';
                a.download = fileName;
                a.click();
                a.remove();
            }
        });
    </script>
}   